<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chatroom</title>
    <link rel="shortcut icon" href="https://dashboard.heroku.com/images/favicon.ico" type="image/vnd.microsoft.icon">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0">

    <script src="/static/jquery_2.js"></script>
    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
    <script type="text/javascript">
        var socket = io.connect();
    </script>

    <link rel="stylesheet" href="/node_modules/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="header">
        <div class="header_wrap container">
            <h1>ChatRoom <small>A chat application built on Node.js, Express, and Socket.io</small></h1>
        </div>
    </div>
    <div class="main_wrap container">
        <div class="left row">
            <div class="users_header col-md-3">
                <h3>Users Logged In:</h3>
                <div class="users"></div>
            </div>
            <div class="messages_header col-md-9">
                <h3>Messages:</h3>
                <div class="messages"></div>
            </div>
        </div>
        <div class="right row">
            <div class="posrel col-md-9 col-md-offset-3">
                <input type="text" name="content" id="content" class="content form-control" placeholder="Enter a message">
                <button id="send" class="btn btn-success"> &gt; </button>
            </div>
        </div>
    </div>
    <script>

        var user = window.prompt("What is your name?");

        function getHiddenProp(){
            var prefixes = ['webkit','moz','ms','o'];
            if ('hidden' in document) return 'hidden';
            for (var i = 0; i < prefixes.length; i++){
                if ((prefixes[i] + 'Hidden') in document)
                    return prefixes[i] + 'Hidden';
            }
            return null;
        }

        function isHidden() {
            var prop = getHiddenProp();
            if (!prop) return false;

            return document[prop];
        }

        var visProp = getHiddenProp();
        if (visProp) {
            var evtname = visProp.replace(/[H|h]idden/,'') + 'visibilitychange';
            document.addEventListener(evtname, visChange);
        }
        function visChange() {

            if (isHidden()) {
                // Hidden
                $('.unread').remove();
            } else {
                // Shown
                document.title = "Chatroom";
            }
        }


        function scrollMessages() {
            $('.messages').scrollTop($(document).height());
        }

        socket.emit('new_user', user);
        socket.emit('get_users');
        socket.emit('get_messages_single');
        scrollMessages();

        setInterval(function(){
            if ( $('.content').val().length == 0 ) {
                socket.emit('user_stopped_typing', user);
            } else {
                socket.emit('user_typing', user);
            }
        }, 1000);

        $('#send').click(function () {
            socket.emit('send_message', {user: user, message: $('.content').val()});
            $('.content').val('');
        });

        socket.on('user_not_typing', function (user) {
            $('.typing_'+user).remove();
        });

        socket.on('update_users', function (data) {
            $('.users').empty();
            for ( x in data ) {
                $('.users').append('<p>'+data[x]+'</p>');
            }
            scrollMessages();
        });

        socket.on('update_messages_single', function (messages) {
            $('.messages').empty();
            for ( x in messages ) {
                $('.messages').append('<p class="posrel"><strong>'+messages[x]['user']+':</strong> '+escapeHtml(messages[x]['message'])+'<small>'+messages[x]['created_at']+'</small></p>');
            }
            scrollMessages();
        });

        socket.on('update_messages', function (message) {
            if ( isHidden() ) {
                $.titleAlert("New chat message!", {
                    requireBlur:false,
                    stopOnFocus:true,
                    interval:700
                });
                if ( $('.unread').length == 0 ) {
                    $('.messages').append('<hr class="unread"><p class="new_user unread">Unread Messages:</p><br class="unread"> ');
                }
            } else {
                document.title = "Chatroom";
            }
            $('.messages').append('<p class="posrel"><strong>'+message['user']+':</strong> '+escapeHtml(message['message'])+'<small>'+message['created_at']+'</small></p>');
            scrollMessages();
            socket.emit('user_stopped_typing', user);
        });

        socket.on('user_joined', function (user) {
            console.log(user);
            $('.messages').append('<p class="new_user">'+user+' joined the room. Say hello!</p>');
            scrollMessages();
        });

        socket.on('user_left', function (user) {
            console.log(user);
            $('.messages').append('<p class="new_user">'+user+' left the room.</p>');
            scrollMessages();
        });

        socket.on('user_typing_now', function (user) {
            if ( $('.typing_'+user).length == 0 ) {
                $('.messages').after('<p class="new_user typing_'+user+'">'+user+' is typing a message <i class="fa fa-spin fa-spinner" aria-hidden="true"></i></p>');
            }
        });

        document.onkeypress = keyPress;

        function keyPress(e){
            var x = e || window.event;
            var key = (x.keyCode || x.which);
            if(key == 13 || key == 3){
                if ( $('.content').val().length > 0 ) {
                    $('#send').click();
                } else {
                    alert('Please enter a message');
                }
            }
        }
        var entityMap = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            "/": '&#x2F;'
        };
        function escapeHtml(string) {
            return String(string).replace(/[&<>\/]/g, function (s) {
                return entityMap[s];
            });
        }
    </script>
    <script src="/node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/node_modules/jquery.titlealert.min.js"></script>
</body>
</html>

